import numpy as np
import matplotlib.pyplot as plt

# Common CD range for all tones
cd_range = np.concatenate([
    np.arange(12, 73, 4),
    np.arange(80, 121, 8),
    np.arange(136, 201, 16)
])

# Pitch ranges
pitch_range_tone1 = np.concatenate([
    np.arange(40, 241, 8),
    np.arange(260, 401, 20)
])
pitch_range_tone_minus1 = np.concatenate([
    np.arange(200, 251, 8),
    np.arange(260, 401, 20)
])

# Directions
directions = [0, 90]

# Store training data
train_data = []

# Tone 1
for cd in cd_range:
    for pitch in pitch_range_tone1:
        for direction in directions:
            train_data.append((cd, pitch, 1, direction))

# Tone -1
for cd in cd_range:
    for pitch in pitch_range_tone_minus1:
        for direction in directions:
            train_data.append((cd, pitch, -1, direction))

# Validation data (only tone=1, no directions)
cd_val = np.arange(20, 201, 2)
val_data = []
for cd in cd_val:
    for pitch in [2 * cd, 3 * cd, 4 * cd, 1000]:
        val_data.append((cd, pitch))

# Prepare training scatter plot
train_cd = [item[0] for item in train_data]
train_pitch = [item[1] for item in train_data]
train_tone = [item[2] for item in train_data]
train_dir = [item[3] for item in train_data]

# Validation
val_cd = [item[0] for item in val_data]
val_pitch = [item[1] for item in val_data]

# Plotting
plt.figure(figsize=(12, 8))

# Plot training by tone and direction
for tone in [1, -1]:
    for direction in directions:
        tone_mask = np.array(train_tone) == tone
        dir_mask = np.array(train_dir) == direction
        mask = tone_mask & dir_mask
        label = f"Train: Tone {tone}, Dir {direction}"
        marker = 'o' if direction == 0 else '^'
        color = 'blue' if tone == 1 else 'green'
        plt.scatter(np.array(train_cd)[mask],
                    np.array(train_pitch)[mask],
                    s=10, alpha=0.5,
                    label=label,
                    marker=marker, color=color)

# Plot validation
plt.scatter(val_cd, val_pitch, s=12, color='red', alpha=0.8, label='Validation (Tone 1)')

plt.xlabel("CD (nm)")
plt.ylabel("Pitch (nm)")
plt.title("Training vs Validation Data (1DLS) - Tones and Directions")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()