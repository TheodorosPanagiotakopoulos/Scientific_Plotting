def separate_by_group_AI(final_dataframe, group, verbose=False):
    # Filter the dataframe by group
    final_dataframe = final_dataframe[final_dataframe["group"].str.lower() == group.lower()]
    final_dataframe.reset_index(drop=True, inplace=True)
    final_dataframe.index += 1

    # Drop unnecessary columns
    cols = get_columns(final_dataframe, verbose=False)
    final_dataframe = drop_all_except(final_dataframe, cols, row_or_column=1)

    # Get RMSE column
    cols = get_columns(final_dataframe, verbose=False)
    final_dataframe = get_RMSE(final_dataframe, cols[:-1], result_column="RMSE")
    final_dataframe.reset_index(drop=True, inplace=True)
    final_dataframe.index += 1

    # Fill RMSE[1] with first valid RMSE value
    non_nan_value = final_dataframe["RMSE"].loc[0]
    final_dataframe["RMSE"] = [non_nan_value] + [np.nan] * (len(final_dataframe) - 1)

    # Add max(max_aitable) column after RMSE
    max_val = final_dataframe["max_aitable"].max()
    max_col_values = [max_val] + [np.nan] * (len(final_dataframe) - 1)
    final_dataframe.insert(final_dataframe.columns.get_loc("RMSE") + 1, "max(max_aitable)", max_col_values)

    # Drop fully NaN rows
    final_dataframe = final_dataframe.dropna(how="all")

    if verbose:
        print(final_dataframe)

    return final_dataframe