import matplotlib.pyplot as plt

# 1. Generate training dataset with specified CD and pitch ranges by tone
train_cd = (
    list(range(12, 73, 4)) +   # 12 to 72 step 4
    list(range(80, 121, 8)) +  # 80 to 120 step 8
    list(range(136, 201, 16))  # 136 to 200 step 16
)
train_directions = [0, 90]

# Tone +1 pitch ranges
pitch_pos = (
    list(range(40, 241, 8)) +      # 40 to 240 step 8
    list(range(260, 401, 20)) +    # 260 to 400 step 20
    list(range(136, 201)) +        # 136 to 200 step 1
    [100]                          # explicitly include 100
)

# Tone -1 pitch ranges
pitch_neg = (
    list(range(200, 241, 8)) +     # 200 to 240 step 8
    list(range(260, 401, 20))      # 260 to 400 step 20
)

# Build training data points
train_points = []

# Tone +1
for cd in train_cd:
    for pitch in pitch_pos:
        for direction in train_directions:
            train_points.append((cd, pitch, +1, direction))

# Tone -1
for cd in train_cd:
    for pitch in pitch_neg:
        for direction in train_directions:
            train_points.append((cd, pitch, -1, direction))

# 2. Generate updated validation dataset
val_cd = list(range(20, 201, 2))  # 20 to 200 step 2
val_points = []
for cd in val_cd:
    for pitch in [2 * cd, 3 * cd, 4 * cd, 1000]:
        val_points.append((cd, pitch, +1, 0))  # tone +1, direction 0

# 3. Compare datasets
train_set = set(train_points)
val_set = set(val_points)
intersection = train_set & val_set
train_only = list(train_set - intersection)
val_only = list(val_set - intersection)
both = list(intersection)

# 4. Helper to extract CD and Pitch for plotting
def extract_cd_pitch(points):
    if not points:
        return [], []
    return zip(*[(cd, pitch) for cd, pitch, tone, direction in points])

# 5. Plotting layout
fig, axes = plt.subplots(1, 3, figsize=(15, 5), sharey=True)

# Left: Training only
x_train, y_train = extract_cd_pitch(train_only)
axes[0].scatter(x_train, y_train, color='red', alpha=0.6, s=10)
axes[0].set_title('Training Only')
axes[0].set_xlabel('CD (nm)')
axes[0].set_ylabel('Pitch (nm)')
axes[0].grid(True)

# Center: Shared in both
x_both, y_both = extract_cd_pitch(both)
axes[1].scatter(x_both, y_both, color='blue', alpha=0.6, s=10)
axes[1].set_title('Shared in Both')
axes[1].set_xlabel('CD (nm)')
axes[1].grid(True)

# Right: Validation only
x_val, y_val = extract_cd_pitch(val_only)
axes[2].scatter(x_val, y_val, color='green', alpha=0.6, s=10)
axes[2].set_title('Validation Only')
axes[2].set_xlabel('CD (nm)')
axes[2].grid(True)

fig.suptitle('Dataset Point Distribution (CD, Pitch, Tone, Direction)', fontsize=14)
plt.tight_layout(rect=[0, 0.03, 1, 0.95])
plt.show()