#!/bin/bash

OUTPUT_FILE="output.txt"
: > "$OUTPUT_FILE"
exec 3>&1 1>>"$OUTPUT_FILE" 2>&1

echo "Looking for .log files" >&3
sleep 0.3

log_files=()
log_count=0
printf "\nLog files found" >&3

shopt -s nocaseglob  # Enable case-insensitive globbing

subdirs=( $(find . -type d -print0 | xargs -0) )
for dir in "${subdirs[@]}"; do
    for logfile in "$dir"/leaf*.log "$dir"/host*.log; do
        [[ -f "$logfile" ]] || continue
        log_files+=("$logfile")
        ((log_count++))
    done
done

echo -e "\n$log_count .log files found" >&3

highlight_special_phrases() {
    sed -E \
        -e 's/no such file or directory/\x1b[0;31m\1\x1b[0m/Ig' \
        -e 's/(memory)/\x1b[0;33m\1\x1b[0m/Ig'
}

show_progress() {
    local count=$1
    local total=$2
    local progress=$(( 100 * count / total ))
    local bar_width=50
    local filled=$(( progress * bar_width / 100 ))
    local bar=$(printf "%${filled}s" | tr ' ' '#')
    bar=$(printf "%-${bar_width}s" "$bar")
    printf "\rProcessing [%s]: %3d%% (%d/%d)" "$bar" "$progress" "$count" "$total" >&3
}

process_logfile() {
    local logfile="$1"
    local dir
    dir=$(dirname "$logfile")

    error_tmp=$(mktemp)
    fail_tmp=$(mktemp)

    awk '(!IGNORECASE=1) /error/ && $0 !~ /error.*\/.*\// {print}' "$logfile" > "$error_tmp"
    grep -i 'fail' "$logfile" > "$fail_tmp"

    if [[ -s "$error_tmp" || -s "$fail_tmp" ]]; then
        echo -e "\n\nIn directory: $dir" >&3
        echo -e " Log file: $logfile" >&3

        if [[ -s "$error_tmp" ]]; then
            echo -e " Matches for 'error':" >&3
            GREP_COLOR='0;32' grep --color=always -i 'error' "$error_tmp" | highlight_special_phrases
        fi

        if [[ -s "$fail_tmp" ]]; then
            echo -e " Matches for 'fail':" >&3
            GREP_COLOR='0;33' grep --color=always -i 'fail' "$fail_tmp" | highlight_special_phrases
        fi

        {
            [[ -s "$error_tmp" ]] && cat "$error_tmp"
            [[ -s "$fail_tmp" ]] && cat "$fail_tmp"
        } >> "$OUTPUT_FILE"
    fi

    rm -f "$error_tmp" "$fail_tmp"
}

total=${#log_files[@]}
count=0
for logfile in "${log_files[@]}"; do
    ((count++))
    show_progress "$count" "$total"
    process_logfile "$logfile"
done

echo -e "\n\nDone. Output saved to $OUTPUT_FILE" >&3