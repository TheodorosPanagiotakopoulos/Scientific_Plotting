import matplotlib.pyplot as plt

# 1. Generate training dataset: various tones and directions
train_cd = list(range(12, 81, 8))  # CD from ~12 to 80
train_pitch = list(range(40, 241, 8)) + list(range(260, 401, 20)) + [1000]
train_tones = [+1, -1]
train_directions = [0, 90]

train_points = [
    (cd, pitch, tone, direction)
    for cd in train_cd
    for pitch in train_pitch
    for tone in train_tones
    for direction in train_directions
]

# 2. Generate validation dataset: only +1 tone and 0Â° direction
val_cd = list(range(20, 201, 2))
val_tones = [+1]
val_directions = [0]
val_points = []

for cd in val_cd:
    for mult in [2, 3, 4]:
        for tone in val_tones:
            for direction in val_directions:
                val_points.append((cd, mult * cd, tone, direction))
    val_points.append((cd, 1000, +1, 0))  # Always include 1000 pitch

# 3. Compute set relationships
train_set = set(train_points)
val_set = set(val_points)
intersection = train_set & val_set
train_only = list(train_set - intersection)
val_only = list(val_set - intersection)
both = list(intersection)

# 4. Helper to extract (CD, Pitch) for plotting
def extract_cd_pitch(points):
    if not points:
        return [], []
    return zip(*[(cd, pitch) for cd, pitch, tone, direction in points])

# 5. Plotting: 3-panel scatter layout
fig, axes = plt.subplots(1, 3, figsize=(15, 5), sharey=True)

# Training-only points
x_train, y_train = extract_cd_pitch(train_only)
axes[0].scatter(x_train, y_train, color='red', alpha=0.6, s=10)
axes[0].set_title('Training Only')
axes[0].set_xlabel('CD (nm)')
axes[0].set_ylabel('Pitch (nm)')
axes[0].grid(True)

# Shared points
x_both, y_both = extract_cd_pitch(both)
axes[1].scatter(x_both, y_both, color='blue', alpha=0.6, s=10)
axes[1].set_title('Shared in Both')
axes[1].set_xlabel('CD (nm)')
axes[1].grid(True)

# Validation-only points
x_val, y_val = extract_cd_pitch(val_only)
axes[2].scatter(x_val, y_val, color='green', alpha=0.6, s=10)
axes[2].set_title('Validation Only')
axes[2].set_xlabel('CD (nm)')
axes[2].grid(True)

# Final layout adjustments
fig.suptitle('Dataset Point Distribution (CD, Pitch, Tone, Direction)', fontsize=14)
plt.tight_layout(rect=[0, 0.03, 1, 0.95])
plt.show()