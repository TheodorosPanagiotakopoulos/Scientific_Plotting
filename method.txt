
---l

🔑 Main Idea

Cosine annealing is a learning rate scheduling technique where the learning rate decays following a cosine curve over time. Optionally, this decay can be restarted periodically (warm restarts), allowing the model to converge to multiple different local minima.

When used with snapshot ensembling, the model is saved at the end of each cycle, and the saved models are combined during inference to improve generalization.


---

🎯 Good For

Training deep networks where sharp local minima may reduce generalization

Improving generalization without early stopping

Creating ensembles without training multiple separate models

Tasks requiring robust predictions, especially in noisy or overparameterized settings

When you want predictive stability but can afford some added inference cost



---

⚙️ How to Do It

🧱 1. Dataset Split

Use a Train / Validation / Test structure:

Train set: Used for full training cycles

Validation set: Used to monitor model quality and guide snapshot saving

Test set: Used only for final evaluation


🔁 2. Set Up Cosine Annealing

Choose:

T_0: number of epochs in the first cycle

T_mult: multiplier to increase cycle length (optional)

lr_max: initial learning rate

lr_min: minimum learning rate


Use a scheduler like:

tf.keras.optimizers.schedules.CosineDecayRestarts(
    initial_learning_rate=lr_max,
    first_decay_steps=T_0,
    t_mul=T_mult,
    alpha=lr_min / lr_max
)

💾 3. Save Snapshots (Optional for Ensembling)

At the end of each cosine cycle, check the validation performance:

If the validation loss is good, save the model weights (snapshot)

Repeat across multiple cycles (e.g., 3–5)


🧪 4. Evaluate and Use

If using snapshots: average predictions at test time

If using one best model: choose the snapshot with lowest validation loss

Evaluate on the test set only once



---

✅ Tips for Success

Tip	Why It Helps

Use L2 regularization	Smooths training across cycles
Monitor validation loss per cycle	Ensures quality of snapshots
Avoid early stopping	Cosine schedules need full cycles to work
Combine with dropout or batch norm	Adds robustness



---

Would you like the same format for Monte Carlo Dropout or Snapshot + MC Dropout combined next?

