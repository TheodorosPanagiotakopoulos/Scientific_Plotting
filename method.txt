import matplotlib.pyplot as plt
import numpy as np

# Training CD and pitch ranges
train_cd = np.concatenate([
    np.arange(12, 72 + 1, 4),
    np.arange(80, 120 + 1, 8),
    np.arange(136, 200 + 1, 16)
])
train_pitch = np.concatenate([
    np.arange(40, 240 + 1, 8),
    np.arange(260, 400 + 1, 20),
    np.array([1000])
])

# Validation CD and pitch (tone=+1, direction=0 only)
val_cd = np.arange(20, 200 + 1, 2)
val_points = set()
for cd in val_cd:
    for multiplier in [2, 3, 4]:
        val_points.add((cd, multiplier * cd, +1, 0))
    val_points.add((cd, 1000, +1, 0))

# Prepare figure
fig, ax = plt.subplots(figsize=(10, 7))

# Plot all training data with tone and direction
for tone, color in [(-1, 'blue'), (+1, 'red')]:
    for direction, marker in [(0, 'o'), (1, 'x')]:
        points = [(cd, pitch) for cd in train_cd for pitch in train_pitch]
        cds, pitches = zip(*points)
        ax.scatter(cds, pitches, c=color, marker=marker, s=10, alpha=0.4,
                   label=f"Train (Tone={tone}, Dir={direction})")

# Overlay validation points
val_cds, val_pitches = zip(*[(cd, pitch) for cd, pitch, tone, direction in val_points])
ax.scatter(val_cds, val_pitches, color='green', marker='*', s=60, label='Validation (Tone=+1, Dir=0)')

# Labels and legend
ax.set_title("CDâ€“Pitch Sampling (Training & Validation)")
ax.set_xlabel("CD (nm)")
ax.set_ylabel("Pitch (nm)")
ax.grid(True)
ax.legend()
plt.tight_layout()
plt.show()