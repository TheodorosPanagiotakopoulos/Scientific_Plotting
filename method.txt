ðŸ›• Temple of Diagnosis


---

My diagnosis:

Both training and validation RMSE steadily increase after a few epochs.

Explanation: The model initially learns (RMSE dips until about epoch 5), but then the optimizerâ€™s weights begin to overshoot minima in the loss landscape, causing both training and validation errors to climb thereafter.


---

Validation RMSE remains above training RMSE at every epoch.

Explanation: The validation set uses CDx/CDy and space values (e.g., WYâ€‰=â€‰WXÃ—{1,2,3}, spaceâ€‰=â€‰40â€“500) that fall outside or at the edges of the denser training grid. These novel combinations are harder to predict, so the modelâ€™s validation error stays higher than its training error.


---

Absolute trainâ€“val RMSE gap shrinks early, then increases as errors worsen.

Explanation: Early on, the model fits the training data faster than it generalizesâ€”narrowing the gap. But as both RMSEs climb due to unstable optimization, the numerical gap widens again, reflecting shared performance degradation rather than improved generalization.


---

Diagnosis:

The model exhibits training divergence after initial learning. Its RMSE rises for both train and validation sets, with validation error consistently higherâ€”indicative of unstable training dynamics (e.g., learning rate too high, insufficient regularization) and poor generalization to the sparser validation grid.


-----

 
import matplotlib.pyplot as plt
import numpy as np
import itertools

# --- Define data ranges ---
cdx_vals = np.concatenate([np.arange(64, 108, 8), [120, 138, 192, 240]])
cdy_vals = [64, 80, 152]
pitch_vals = [44, 48, 56, 72, 96]
space_vals = [40, 60, 100, 140, 200, 300, 400, 500]
tones = [-1, 1]
directions = [0, 90]

# --- Marker styles for direction ---
marker_map = {0: 'o', 90: '^'}
tone_color = {-1: 'red', 1: 'blue'}
pitch_color_map = {44: 'black', 48: 'gray', 56: 'green', 72: 'orange', 96: 'purple'}
space_alpha_map = {40: 0.3, 60: 0.4, 100: 0.5, 140: 0.6, 200: 0.7, 300: 0.8, 400: 0.9, 500: 1.0}

# --- Prepare the plot ---
fig, ax = plt.subplots(figsize=(12, 10))

# --- Generate combinations and plot ---
for (cdx, cdy, px, py, sx, sy, tone, direction) in itertools.product(
        cdx_vals, cdy_vals, pitch_vals, pitch_vals,
        space_vals, space_vals, tones, directions):
    
    marker = marker_map[direction]
    face_color = tone_color[tone]
    edge_color = pitch_color_map[py]
    size = 20 + 2 * px  # Size based on PitchX
    alpha = space_alpha_map.get(sx, 0.5)
    
    ax.scatter(cdx, cdy,
               marker=marker,
               c=face_color,
               edgecolors=edge_color,
               s=size,
               alpha=alpha,
               linewidths=1.5)

# --- Axis settings ---
ax.set_title("Grid CDxâ€“CDy Sampling Visualization with Multi-D Encodings")
ax.set_xlabel("CDx (nm)")
ax.set_ylabel("CDy (nm)")
ax.grid(True)

# --- Legend proxies ---
from matplotlib.lines import Line2D

legend_elements = [
    Line2D([0], [0], marker='o', color='w', label='Dir 0', markerfacecolor='gray', markersize=10),
    Line2D([0], [0], marker='^', color='w', label='Dir 90', markerfacecolor='gray', markersize=10),
    Line2D([0], [0], marker='o', color='blue', label='Tone +1', linestyle='None'),
    Line2D([0], [0], marker='o', color='red', label='Tone -1', linestyle='None'),
    Line2D([0], [0], marker='o', color='black', markeredgecolor='black', label='PitchY = 44', linestyle='None'),
    Line2D([0], [0], marker='o', color='black', markeredgecolor='green', label='PitchY = 56', linestyle='None'),
    Line2D([0], [0], marker='o', color='black', markeredgecolor='purple', label='PitchY = 96', linestyle='None'),
]

ax.legend(handles=legend_elements, loc='upper right')
plt.tight_layout()
plt.show()